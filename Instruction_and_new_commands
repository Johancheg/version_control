# Инструкция по работе с GIT

## Основы
Git — это набор консольных утилит, которые отслеживают и фиксируют изменения в файлах (чаще всего речь идет об исходном коде программ, но вы можете использовать его для любых файлов на ваш вкус). 
Изначально Git был создан Линусом Торвальдсом при разработке ядра Linux. Однако инструмент так понравился разработчикам, что в последствии, он получил широкое распространение и его стали использовать в других проектах. 
С его помощью вы можете сравнивать, анализировать, редактировать, сливать изменения и возвращаться назад к последнему сохранению. Этот процесс называется контролем версий.

## Установка
Установить git на свою машину очень просто:
```
- Linux — нужно просто открыть терминал и установить приложение при помощи пакетного менеджера вашего дистрибутива. Для Ubuntu команда будет выглядеть следующим образом:
```
```
`sudo apt-get install git`
```
```
- Windows — лучше установить git for windows, так как он содержит и клиент с графическим интерфейсом, и эмулятор bash.
```

## Создание нового репозитория
git хранит свои файлы и историю прямо в папке проекта. Чтобы создать новый репозиторий, нам нужно открыть терминал, зайти в папку нашего проекта и выполнить команду init. 
Это включит приложение в этой конкретной папке и создаст скрытую директорию .git, где будет храниться история репозитория и настройки.
Создайте на рабочем столе папку под названием git_exercise. Для этого в окне терминала введите:
```
mkdir Desktop/git_exercise/
 cd Desktop/git_exercise/
 git init
```

## Определение состояния
status — это еще одна важнейшая команда, которая показывает информацию о текущем состоянии репозитория: актуальна ли информация на нём, нет ли чего-то нового, что поменялось, и так далее. Запуск git status на нашем свежесозданном репозитории должен выдать:
```
git status
On branch master
Initial commit
Untracked files:
(use "git add ..." to include in what will be committed)
hello.txt
```

## Подготовка файлов
В git есть концепция области подготовленных файлов. Можно представить ее как холст, на который наносят изменения, которые нужны в коммите. 
Сперва он пустой, но затем мы добавляем на него файлы (или части файлов, или даже одиночные строчки) командой add и, наконец, коммитим все нужное в репозиторий (создаем слепок нужного нам состояния) командой commit.
В нашем случае у нас только один файл, так что добавим его:
```
git add hello.txt
```
Если нам нужно добавить все, что находится в директории, мы можем использовать
```
git add -A
```
Проверим статус снова, на этот раз мы должны получить другой ответ:
```
git status
On branch master
Initial commit
Changes to be committed:
(use "git rm --cached ..." to unstage)
new file: hello.txt
```
Файл готов к коммиту. Сообщение о состоянии также говорит нам о том, какие изменения относительно файла были проведены в области подготовки — в данном случае это новый файл, но файлы могут быть модифицированы или удалены.

## Фиксация изменений
### Как сделать commmit
Все сделанные изменения мы должны обозначить для гита:
```
git add .
```
Теперь создадим непосредственно сам коммит
```
git commit -m 'Add some code'
```
Флажок -m задаст commit message - комментарий разработчика. Он необходим для описания закоммиченных изменений. И здесь работает золотое правило всех комментариев в коде: «Максимально ясно, просто и содержательно обозначь написанное!»

### Как посмотреть коммиты
Для просмотра все выполненных фиксаций можно воспользоваться историей коммитов. Она содержит сведения о каждом проведенном коммите проекта. Запросить ее можно при помощи команды:
```
git log
```
В ней содержится вся информация о каждом отдельном коммите, с указанием его хэша, автора, списка изменений и даты, когда они были сделаны. Отследить интересующие вас операции в списке изменений, можно по хэшу коммита, при помощи команды git show:
```
git show hash_commit
```
Ну а если вдруг нам нужно переделать commit message и внести туда новый комментарий, можно написать следующую конструкцию
```
git commit --amend -m 'Новый комментарий''
```


# Инструкция по оформлению Markdown файлов
Markdown - это облегчённый язык разметки, который преобразует текст в структурированный HTML. Следующее руководство поможет вам разобраться, как использовать Markdown.

## Заголовки
```
# Заголовок первого уровня
## Заголовок второго уровня
### Заголовок третьего уровня
#### Заголовок четвёртого уровня
##### Заголовок пятого уровня
###### Заголовок шестого уровня
```
***Пример:***

# Заголовок первого уровня
## Заголовок второго уровня
### Заголовок третьего уровня
#### Заголовок четвёртого уровня
##### Заголовок пятого уровня
###### Заголовок шестого уровня
---

## Параграфы и переносы строк
```
Это параграф. Чтобы создать новый параграф, оставьте пустую строку между двумя строками текста.

Это первая строка  
И это вторая строка, но они находятся в одном параграфе. Для переноса строки используйте два пробела в конце предыдущей строки.
```
***Пример:***

Это параграф. Чтобы создать новый параграф, оставьте пустую строку между двумя строками текста.

Это первая строка  
И это вторая строка, но они находятся в одном параграфе. Для переноса строки используйте два пробела в конце предыдущей строки.

---

## Выделение текста
```
*курсив*  
_курсив_

**жирный**  
__жирный__

***жирный курсив***  
___жирный курсив___

~~зачеркнутый~~
```
***Пример:***

*курсив*  
_курсив_

**жирный**  
__жирный__

***жирный курсив***  
___жирный курсив___

~~зачеркнутый~~

---

## Списки
### Нумерованный список
```
1. Пункт первый
2. Пункт второй
3. Пункт третий
```
***Пример:***

1. Пункт первый
2. Пункт второй
3. Пункт третий
---

### Маркированный список
```
- Пункт первый
- Пункт второй
- Пункт третий
```
***Пример:***

- Пункт первый
- Пункт второй
- Пункт третий
---
### Вложенные списки
Также можно делать вложенные списки, добавляя 4 пробела перед пунктом:
```
1. Пункт первый
    - Подпункт первый
    - Подпункт второй
2. Пункт второй
```
***Пример:***

1. Пункт первый
    - Подпункт первый
    - Подпункт второй
2. Пункт второй
---

## Ссылки
```
[Текст ссылки](https://www.example.com)
```
***Пример:***

[Текст ссылки](https://www.example.com)

---

## Изображения
```
![Текст описания](https://www.example.com/image.jpg)
```

---

## Блоки кода
### Строка кода
```
`строка кода`
```
***Пример:***

`строка кода`

---
### Блок кода

## Комментарии
Вы можете вставить комментарии в свой markdown-файл, которые не будут отображаться в окончательном отформатированном виде:
```
[//]: # (Это комментарий, он не будет отображаться)
```
***Пример:***

[//]: # (Это комментарий, он не будет отображаться)

---

Премещение по веткам
```sh
git checkout <branch_name>
```

Посмотреть лог в полном виде
```sh
git log
```

Посмотреть лог в сокращенном виде
```sh
git log --oneline
```

Отображение всех веток all branch view
```sh
git branch
```

## Как подключиться к удаленному репозиторию
Для загрзуки данных в удаленный репозиторий сначала к нему нужно подключиться. Для подключения необходимо ввести команду:

```sh
# This is only an example. Replace the URI with your own repository address.
$ git remote add origin https://github.com/helloworld/awesome-project.git
```
Ссылку необходимо подставить свою. Скопировать ее можно со своего гитхаба.

## Отправка изменений в удаленный репозиторий

После внесения изменений и создания коммита, мы можем отправить изменения на сервер. Отправка коммита осуществляется с помощью команды push. У нее есть два параметра - имя удаленного рпеозитория и ветку, в которую необходимо внести изменения.

```sh
git push 
```

## Клонирование репозитория

Для клонировния репозитория существует команда clone:

```sh
git clone https://github.com/helloworld/awesome-project.git
```

## Запрос изменений с удаленного репозитория
Для того что бы получить инфомрацию об изменениях в удаленном репозитории, применияется команда pull.

```sh
git pull https://github.com/helloworld/awesome-project.git
```
